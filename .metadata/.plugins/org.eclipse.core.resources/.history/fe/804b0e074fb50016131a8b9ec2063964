
#include "Platform.h"
#include <iostream>
#include <map>
#define _USE_MATH_DEFINES
#include <math.h>
#define GLEW_STATIC
#include <GL/glew.h>
#include <GL/gl.h>
#include <GLFW/glfw3.h>
#include <SOIL.h>
#include <ft2build.h>
#include FT_FREETYPE_H
#include "errorHandling.h"
#include "Shader.h"

using namespace std;

// http://stackoverflow.com/questions/23177229/how-to-cast-int-to-const-glvoid
#define BUFFER_OFFSET(i) ((char *)NULL + (i))

namespace platform
{
	typedef struct
	{
		float red; float blue; float green;
	}
	Color;

	const Color COLORS[] = {
		{1, 0, 0},			// Red
		{0, 1, 0},			// Green
		{0, 0, 1},			// Blue
		{.5f, 0, .5f},		// purple
		{.5f, .5f, .5f},	// gray
		{0,0,0}
	};

	GLuint circleBuffer = 0;
	GLuint rectangleBuffer = 0;
	map<const char*, int> images;
	Shader* colorShader = NULL;
	Shader* textureShader = NULL;
	Shader* blurShader = NULL;
	FT_Library ft;
	FT_Face face;

	void draw_init()
	{
		int result = glewInit();
		if(result != GLEW_OK)
		{
			handleErrors(
					result, "glewInit:",
					(const char*)glewGetErrorString(result));
		}

		// Text rendering setup
		if (FT_Init_FreeType(&ft))
		    std::cout << "ERROR::FREETYPE: Could not init FreeType Library" << std::endl;
		if (FT_New_Face(ft, "fonts/arial.ttf", 0, &face))
		    std::cout << "ERROR::FREETYPE: Failed to load font" << std::endl;

		// Setup data for circles
		{
			GLfloat circleData[(CIRCLE_RESOLUTION) * 2];
			const double phaseDistance = 2*M_PI/(CIRCLE_RESOLUTION-1);
			for(int i = 0; i < CIRCLE_RESOLUTION; i++)
			{
				circleData[i*2] = sin(i*phaseDistance);
				circleData[i*2+1] = cos(i*phaseDistance);
			}
			glGenBuffers(1, &circleBuffer);
			glBindBuffer(GL_ARRAY_BUFFER, circleBuffer);
			glBufferData(
					GL_ARRAY_BUFFER, sizeof(circleData),
					circleData, GL_STATIC_DRAW);
			glBindBuffer(GL_ARRAY_BUFFER, 0);
		}

		// Setup data for rectangles
		{
			GLfloat rectangleData[] =
			{
				-.5f, -.5f,		0,1,
				-.5f, .5f,		0,0,
				.5f, .5f,		1,0,
				.5f, -.5f,		1,1,
				-.5f, -.5f,		0,1
			};
			glGenBuffers(1, &rectangleBuffer);
			glBindBuffer(GL_ARRAY_BUFFER, rectangleBuffer);
			glBufferData(
					GL_ARRAY_BUFFER, sizeof(rectangleData),
					rectangleData, GL_STATIC_DRAW);
			glBindBuffer(GL_ARRAY_BUFFER, 0);
		}

		// Setup shaders
		if(colorShader == NULL)
		{
			colorShader = new Shader("media/frag_color.txt");
			textureShader = new Shader("media/frag_texture.txt");
			//blurShader = new Shader("media/frag_blur.txt");
		}
	}

	void draw_shutdown()
	{
		glDeleteBuffers(1, &circleBuffer);
		glDeleteBuffers(1, &rectangleBuffer);
		delete colorShader;
		delete textureShader;
		delete blurShader;
	}

	void setTextSize(float size)
	{

	}

	void drawCircle(float x, float y, float radius, int colorIndex, bool filled, float opacity)
	{
		Color c = COLORS[colorIndex];
		Shader::useShader("media/frag_color.txt");
		Shader::setParameter_vec2("objectPosition", x, y);
		Shader::setParameter_vec2("objectScale", radius, radius);
		Shader::setParameter_vec3("objectColor", c.red, c.green, c.blue);
		Shader::setParameter_float("objectOpacity", opacity);

		glBindBuffer(GL_ARRAY_BUFFER, circleBuffer);

		int vertexPosition = Shader::getParameterInfo("vertexPosition")->id;
		glVertexAttribPointer(
				vertexPosition, 2, GL_FLOAT,
				GL_FALSE, 0, BUFFER_OFFSET(0));
		glEnableVertexAttribArray(vertexPosition);

		glDrawArrays(
				filled ? GL_TRIANGLE_FAN : GL_LINE_STRIP,
				0, CIRCLE_RESOLUTION);

		glBindBuffer(GL_ARRAY_BUFFER, 0);
	}

	void drawRectangle(
			float x, float y, float sizeX, float sizeY,
			int colorIndex, bool filled, float opacity, float rotation)
	{
		Color c = COLORS[colorIndex];
		Shader::useShader("media/frag_color.txt");
		Shader::setParameter_vec2("objectPosition", x, y);
		Shader::setParameter_vec2("objectScale", sizeX, sizeY);
		Shader::setParameter_vec3("objectColor", c.red, c.green, c.blue);
		Shader::setParameter_float("objectOpacity", opacity);

		glBindBuffer(GL_ARRAY_BUFFER, rectangleBuffer);

		int vertexPosition = Shader::getParameterInfo("vertexPosition")->id;
		glVertexAttribPointer(
				vertexPosition, 2, GL_FLOAT,
				GL_FALSE, 16, BUFFER_OFFSET(0));
		glEnableVertexAttribArray(vertexPosition);

		glDrawArrays(filled ? GL_TRIANGLE_FAN : GL_LINE_STRIP, 0, 5);

		glBindBuffer(GL_ARRAY_BUFFER, 0);
	}

	void drawText(
			float x, float y, int colorIndex,
			const char* toDraw, float opacity, float rotation)
	{
	}

	int loadImage(const char* filename)
	{
		int result = SOIL_load_OGL_texture(
				filename, SOIL_LOAD_AUTO,
				SOIL_CREATE_NEW_ID, SOIL_FLAG_INVERT_Y);
		images[filename] = result;
		return result;
		return 0;
	}

	int drawImage(
			float x, float y, float sizeX, float sizeY,
			const char* filename, float opacity, float rotation)
	{
		if(images.find(filename) == images.end())
		{
			loadImage(filename);
		}
		int imageId = images[filename];
		drawImage(x, y, sizeX, sizeY, imageId, opacity, rotation);
		return imageId;
	}

	int drawImage(
			float x, float y, float sizeX, float sizeY,
			int imageId, float opacity, float rotation)
	{
		Shader::useShader("media/frag_texture.txt");
		Shader::setParameter_vec2("objectPosition", x, y);
		Shader::setParameter_vec2("objectScale", sizeX, sizeY);
		Shader::setParameter_Texture1("mainTex", imageId);
		Shader::setParameter_float("objectOpacity", opacity);

		glBindBuffer(GL_ARRAY_BUFFER, rectangleBuffer);

		int vertexPosition = Shader::getParameterInfo("vertexPosition")->id;
		glVertexAttribPointer(
				vertexPosition, 2, GL_FLOAT,
				GL_FALSE, 16, BUFFER_OFFSET(0));
		glEnableVertexAttribArray(vertexPosition);

		int vertexTexCoord = Shader::getParameterInfo("vertexTexCoord")->id;
		glVertexAttribPointer(
				vertexTexCoord, 2, GL_FLOAT,
				GL_FALSE, 16, BUFFER_OFFSET(8));
		glEnableVertexAttribArray(vertexTexCoord);

		glDrawArrays(GL_TRIANGLE_FAN, 0, 5);

		glDisableVertexAttribArray(vertexPosition);
		glDisableVertexAttribArray(vertexTexCoord);
		glActiveTexture(GL_TEXTURE0);
		glBindTexture(GL_TEXTURE_2D, 0);
		glBindBuffer(GL_ARRAY_BUFFER, 0);

		return imageId;
	}
}
