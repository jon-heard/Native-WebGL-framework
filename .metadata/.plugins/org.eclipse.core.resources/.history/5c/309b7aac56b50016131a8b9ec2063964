
#include "Platform.h"
#include "errorHandling.h"

#include <iostream>

using namespace std;

// http://stackoverflow.com/questions/23177229/how-to-cast-int-to-const-glvoid
#define BUFFER_OFFSET(i) ((char *)NULL + (i))

namespace platform
{
	FT_Library ft;
	FT_Face face;

	void text_init()
	{
		if (FT_Init_FreeType(&ft))
			handleErrors(0, "FREETYPE: Could not init FreeType Library");
		if (FT_New_Face(ft, "media/times.ttf", 0, &face))
			handleErrors(0, "FREETYPE: Failed to load font");
		FT_Set_Pixel_Sizes(face, 0, 12);
	}

	void text_shutdown()
	{
	}

	void setTextSize(unsigned int size)
	{
		FT_Set_Pixel_Sizes(face, 0, size);
	}

	void drawText(
			float x, float y, int colorIndex,
			const char* toDraw, float opacity, float rotation)
	{
	}

	int loadImage(const char* filename)
	{
		int result = SOIL_load_OGL_texture(
				filename, SOIL_LOAD_AUTO,
				SOIL_CREATE_NEW_ID, SOIL_FLAG_INVERT_Y);
		images[filename] = result;
		return result;
		return 0;
	}

	int drawImage(
			float x, float y, float sizeX, float sizeY,
			const char* filename, float opacity, float rotation)
	{
		if(images.find(filename) == images.end())
		{
			loadImage(filename);
		}
		int imageId = images[filename];
		drawImage(x, y, sizeX, sizeY, imageId, opacity, rotation);
		return imageId;
	}

	int drawImage(
			float x, float y, float sizeX, float sizeY,
			int imageId, float opacity, float rotation)
	{
		Shader::useShader("media/frag_texture.txt");
		Shader::setParameter_vec2("objectPosition", x, y);
		Shader::setParameter_vec2("objectScale", sizeX, sizeY);
		Shader::setParameter_Texture1("mainTex", imageId);
		Shader::setParameter_float("objectOpacity", opacity);

		glBindBuffer(GL_ARRAY_BUFFER, rectangleBuffer);

		int vertexPosition = Shader::getParameterInfo("vertexPosition")->id;
		glVertexAttribPointer(
				vertexPosition, 2, GL_FLOAT,
				GL_FALSE, 16, BUFFER_OFFSET(0));
		glEnableVertexAttribArray(vertexPosition);

		int vertexTexCoord = Shader::getParameterInfo("vertexTexCoord")->id;
		glVertexAttribPointer(
				vertexTexCoord, 2, GL_FLOAT,
				GL_FALSE, 16, BUFFER_OFFSET(8));
		glEnableVertexAttribArray(vertexTexCoord);

		glDrawArrays(GL_TRIANGLE_FAN, 0, 5);

		glDisableVertexAttribArray(vertexPosition);
		glDisableVertexAttribArray(vertexTexCoord);
		glActiveTexture(GL_TEXTURE0);
		glBindTexture(GL_TEXTURE_2D, 0);
		glBindBuffer(GL_ARRAY_BUFFER, 0);

		return imageId;
	}
}
