
#include "Platform.h"
#include <iostream>
#include <map>
#define _USE_MATH_DEFINES
#include <math.h>
#define GLEW_STATIC
#include <GL/glew.h>
#include <GL/gl.h>
#include <GLFW/glfw3.h>
#include <SOIL.h>
#include "shaders.h"
#include "OGLFT.h"

using namespace std;

namespace platform
{
	typedef struct
	{
		float red; float blue; float green;
	} Color;


	const int CIRCLE_RESOLUTION = 50;

	const Color COLORS[] = {
		{1, 0, 0},			// Red
		{0, 1, 0},			// Green
		{0, 0, 1},			// Blue
		{.5f, 0, .5f},		// purple
		{.5f, .5f, .5f}		// gray
	};

	int attribute_position = 0;

	GLuint circleBuffer = 0;
	GLuint rectangleBuffer = 0;
	map<const char*, int> images;
	OGLFT::Monochrome* monochrome;

	void draw_init()
	{
		attribute_position = shaders_getAttributeIndex_vertexPosition();

		// Text rendering setup
		monochrome = new OGLFT::Monochrome("media/times.ttf", 12);
		glPixelStorei( GL_UNPACK_ALIGNMENT, 1 );

		// Setup data for circles
		{
			GLfloat circleData[(CIRCLE_RESOLUTION) * 2];
			const double phaseDistance = 2*M_PI/(CIRCLE_RESOLUTION-1);
			for(int i = 0; i < CIRCLE_RESOLUTION; i++)
			{
				circleData[i*2] = sin(i*phaseDistance);
				circleData[i*2+1] = cos(i*phaseDistance);
			}

			glGenBuffers(1, &circleBuffer);
			glBindBuffer(GL_ARRAY_BUFFER, circleBuffer);
			glBufferData(
					GL_ARRAY_BUFFER, sizeof(circleData), circleData, GL_STATIC_DRAW);

			glBindBuffer(GL_ARRAY_BUFFER, 0);
		}
		// Setup data for rectangles
		{
			GLfloat rectangleData[] = { -.5f,-.5f, -.5f,.5f, .5f,.5f, .5f,-.5f, -.5f,-.5f };

			glGenBuffers(1, &rectangleBuffer);
			glBindBuffer(GL_ARRAY_BUFFER, rectangleBuffer);
			glBufferData(
					GL_ARRAY_BUFFER, sizeof(rectangleData), rectangleData, GL_STATIC_DRAW);

			glBindBuffer(GL_ARRAY_BUFFER, 0);
		}
	}

	void draw_shutdown()
	{
		glDeleteBuffers(1, &circleBuffer);
		glDeleteBuffers(1, &rectangleBuffer);
	}

	void drawCircle(float x, float y, float radius, int colorIndex, bool filled)
	{
		Color c = COLORS[colorIndex];
		shaders_useColor(x, y, radius, radius, c.red, c.green, c.blue, 0);

		glBindBuffer(GL_ARRAY_BUFFER, circleBuffer);

		glVertexAttribPointer(
				attribute_position, 2, GL_FLOAT, GL_FALSE, 0, BUFFER_OFFSET(0));
		glEnableVertexAttribArray(attribute_position);

		glDrawArrays(filled ? GL_QUADS : GL_LINE_STRIP, 0, CIRCLE_RESOLUTION);

		glBindBuffer(GL_ARRAY_BUFFER, 0);
	}

	void drawRectangle(float x, float y, float xSize, float ySize, int colorIndex, bool filled, float rotation)
	{
		Color c = COLORS[colorIndex];
		shaders_useColor(x, y, xSize, ySize, c.red, c.green, c.blue, 0);

		glBindBuffer(GL_ARRAY_BUFFER, rectangleBuffer);

		glVertexAttribPointer(
				attribute_position, 2, GL_FLOAT, GL_FALSE, 0, BUFFER_OFFSET(0));
		glEnableVertexAttribArray(attribute_position);

		glDrawArrays(filled ? GL_TRIANGLE_FAN : GL_LINE_STRIP, 0, 5);

		glBindBuffer(GL_ARRAY_BUFFER, 0);
	}

	void drawText(float x, float y, int colorIndex, const char* toDraw, float rotation)
	{
		Color c = COLORS[colorIndex];
		//monochrome->setForegroundColor(c.red, c.green, c.blue);
		shaders_useColor(x-50, y, 1, 1, c.red, c.green, c.blue, 0);
		monochrome->draw(x, y, toDraw);
	}

	int loadImage(const char* filename)
	{
		int result = SOIL_load_OGL_texture(filename, SOIL_LOAD_AUTO, SOIL_CREATE_NEW_ID, SOIL_FLAG_DDS_LOAD_DIRECT);
		images[filename] = result;
		return result;
	}

	int drawImage(float x, float y, float sizeX, float sizeY, const char* filename, float rotation)
	{
		if(images.find(filename) == images.end())
		{
			loadImage(filename);
		}
		int imageId = images[filename];
		drawImage(x, y, sizeX, sizeY, imageId, rotation);
		return imageId;
	}

	int drawImage(float x, float y, float sizeX, float sizeY, int imageId, float rotation)
	{
		shaders_useTexture(x, y, sizeX, sizeY, imageId, rotation);

		glBindBuffer(GL_ARRAY_BUFFER, rectangleBuffer);

		glVertexAttribPointer(
				attribute_position, 2, GL_FLOAT, GL_FALSE, 0, BUFFER_OFFSET(0));
		glEnableVertexAttribArray(attribute_position);

		glDrawArrays(GL_TRIANGLES, 0, 12);

		glBindBuffer(GL_ARRAY_BUFFER, 0);

		return imageId;
	}
}
