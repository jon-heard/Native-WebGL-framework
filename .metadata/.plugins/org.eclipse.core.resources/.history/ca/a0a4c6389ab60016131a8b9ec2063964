
#include "Platform.h"
#include "errorHandling.h"
#include <map>
#include <gl/gl.h>
#include <ft2build.h>
#include FT_FREETYPE_H

#include <iostream>

using namespace std;

// http://stackoverflow.com/questions/23177229/how-to-cast-int-to-const-glvoid
#define BUFFER_OFFSET(i) ((char *)NULL + (i))

namespace platform
{
	struct ivec2
	{
		int x; int y;
	};
	struct Character
	{
		unsigned int TextureID;
		ivec2        Size;
		ivec2        Bearing;
		GLuint       Advance;
	};
	FT_Library ft;
	FT_Face face;
	std::map<char, Character> Characters;
	void refreshGlyphTextures();

	void text_init()
	{
		if (FT_Init_FreeType(&ft))
			handleErrors(0, "FREETYPE: Could not init FreeType Library");
		if (FT_New_Face(ft, "media/times.ttf", 0, &face))
			handleErrors(0, "FREETYPE: Failed to load font");
		FT_Set_Pixel_Sizes(face, 0, 12);
		refreshGlyphTextures();
	}

	void text_shutdown()
	{
	}

	void setTextSize(unsigned int size)
	{
		FT_Set_Pixel_Sizes(face, 0, size);
		refreshGlyphTextures();
	}

	void drawText(
			float x, float y, int colorIndex,
			const char* toDraw, float opacity, float rotation)
	{
	}

	void refreshGlyphTextures()
	{
		glPixelStorei(GL_UNPACK_ALIGNMENT, 1); // Disable byte-alignment restriction

		for (GLubyte c = 0; c < 128; c++)
		{
		    // Load character glyph
		    if (FT_Load_Char(face, c, FT_LOAD_RENDER))
		    {
		        std::cout << "ERROR::FREETYTPE: Failed to load Glyph" << std::endl;
		        continue;
		    }
		    // Generate texture
		    GLuint texture;
		    glGenTextures(1, &texture);
		    glBindTexture(GL_TEXTURE_2D, texture);
		    glTexImage2D(
		        GL_TEXTURE_2D,
		        0,
		        GL_RED,
		        face->glyph->bitmap.width,
		        face->glyph->bitmap.rows,
		        0,
		        GL_RED,
		        GL_UNSIGNED_BYTE,
		        face->glyph->bitmap.buffer
		    );
		    // Set texture options
		    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP);
		    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP);
		    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
		    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
		    // Now store character for later use
		    Character character = {
		        texture,
		        ivec2(face->glyph->bitmap.width, face->glyph->bitmap.rows),
		        ivec2(face->glyph->bitmap_left, face->glyph->bitmap_top),
		        face->glyph->advance.x
		    };
		    Characters.insert(std::pair<GLchar, Character>(c, character));
		}
	}
}
